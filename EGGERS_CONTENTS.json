{"home":{"content":"# Jukebox\n---\n\nWelcome to Lecture 18! Here's a brief class breakdown.\n\n#### Learning Objectives\n---\n\n1. Build a legit application incorporating all the stuff we learned thus far.\n\n#### To Do Today\n---\n#### [Warmup](#warmup)\n#### [Project Desc](#project-desc)","idx":0},"title":{"content":"Jukebox","idx":1},"desc":{"content":"Build a Spotify API based jukebox app","idx":2},"warmup":{"content":"# Warmup\n---\n\nLet's begin with a few review problems.\n\n#### Problem 1\n---\n\nBuild an asynchronous add function with callbacks. \n\n```js\nasyncAdd(1,2, (sum) => {\n    console.log(sum); // 3\n});\n```\n\n#### Problem 2\n---\n\nBuild an asynchronous add function with promises. \n\n```js\npromiseAdd(1,2)\n    .then((sum) => {\n        console.log(sum); // 3\n    });\n```\n\nUsing this definition, call your function three times and console.log out the results with **all three** have returned.\n\n#### Problem 3\n---\n\nBuild an asynchronous add function with async/await. \n\n```js\nawaitAdd(1,2).then((sum) => {\n    console.log(sum);\n});\n```\n\n#### Stretch Goals\n---\n\nLet's build a simple script loader. Using google, find out how to **load a javascript file** into your HTML code **dynamically**.\n\nBasically, something like this:\n\n```js\nloadJSFile('javascript/NumberAPI.js')\n    .then(() => {\n        // in here, your NumbersAPI.js \n        // object should be loaded\n    });\n```\n\nBuild this any way you see fit.\n\n\n","idx":3},"project-desc":{"content":"# Spotify Jukebox\n---\n\nWe will build a modular, promise based Spotify powered jukebox app.\n\n#### [Example](https://mottaquikarim.github.io/soundcloud-jukebox/)\nThis is an example of how our app should look and behave.\n\n#### Guidelines\n---\n\nYou are to build a jukebox with the following features:\n\n1. User is able to search via an input field *OR* button click for **album**, **song**, **artist**, OR **playlist**.\n2. IF user is searching for album, artist, or playlist, user is able to click into the search result and view songs available by that tag.\n3. For any song that is presented, user can click to **add** to current playlist.\n4. This playlist will appear on the right side of the app, user has the ability to start a song, pause a song. When a song is completed, if there is another song in the playlist, that song must start playing.\n * Once user reaches the end of the playlist, it must loop.\n\n#### Stretch Goals\n---\n\n1. User playlists are saved via local storage.\n\n#### Technology to Use\n---\n\n1. Promises\n2. Semantic-UI\n3. To use Spotify API, consider this **[JS client](https://github.com/JMPerez/spotify-web-api-js)**\n4. Here is the **[Spotify API Ref](https://developer.spotify.com/web-api/)**\n\n#### Getting Started\n---\n\n1. #### [Clone This](https://github.com/FEWDMaterials/boilerplate-semantic)\n\n2. #### Remember to start small and test often!\n\n3. #### GOODLUCK. \n\n\n\n\n\n\n\n","idx":4},"__list__":["home","title","desc","warmup","project-desc"]}